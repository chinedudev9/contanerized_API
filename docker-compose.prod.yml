version: '3.8'

services:
  # ===========================
  # PostgreSQL Database Service
  # ===========================
  postgres:
    image: postgres:15-alpine
    container_name: containerized_api_postgres_prod
    restart: always
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_ADMIN_PASSWORD:-change_this_admin_password}
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/01-init-db.sql:ro
    networks:
      - prod_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    # Security: Don't expose port in production (only internal network access)
    # ports:
    #   - "5432:5432"
    
    # Production optimizations
    command: >
      postgres
      -c max_connections=100
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1

  # ===========================
  # Node.js Application Service  
  # ===========================
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: containerized_api_app_prod
    restart: always
    env_file:
      - .env.production
    ports:
      - "${APP_PORT:-3000}:3000"
    volumes:
      # Only mount logs directory in production
      - app_logs:/app/log:rw
    networks:
      - prod_network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "
        const http = require('http');
        const options = {
          host: 'localhost',
          port: process.env.PORT || 3000,
          path: '/health',
          timeout: 2000
        };
        const request = http.request(options, (res) => {
          if (res.statusCode == 200) {
            process.exit(0);
          } else {
            process.exit(1);
          }
        });
        request.on('error', () => process.exit(1));
        request.end();
      "]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Resource limits for production
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # ===========================
  # Nginx Reverse Proxy (Optional)
  # ===========================
  nginx:
    image: nginx:alpine
    container_name: containerized_api_nginx_prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - prod_network
    depends_on:
      - app
    profiles:
      - proxy # Only start with --profile proxy

# ===========================
# Networks
# ===========================
networks:
  prod_network:
    driver: bridge
    name: containerized_api_prod_network

# ===========================
# Volumes
# ===========================
volumes:
  postgres_prod_data:
    name: containerized_api_postgres_prod_data
  app_logs:
    name: containerized_api_app_logs